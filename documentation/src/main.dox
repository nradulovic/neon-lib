/** @file */
/** @mainpage   Overview
@section        neon_specs Neon Software Components
@subsection     spec_source Source code

The source code of the kernel and all of it's ports are published under **free
software license**, which guarantees end users (individuals, organizations,
companies) the freedoms to use, study, share (copy), and modify the software.

The GPL grants the recipients of a computer software the rights of the Free
Software Definition (written by Richard Stallman) and uses copyleft to ensure
the freedoms are preserved whenever the work is distributed, even when the work
is changed or added to. The GPL is a copyleft license, which means that derived
works can only be distributed under the same license terms.

For more details visit: https://gnu.org/licenses/gpl.html

@subsection     spec_api Consistent Application Programming Interface

@par            Coding style
All public objects declared in Application Programming Interface are following
this coding style:
- All objects except macros are using `obj_long_name` style names
- All functions, structures and unions are prefixed with: `n`
- All typedef-ed types are prefixed with: `n` and no postfixes
- All macro names are in `UPPERCASE` style, words are delimited by underscore
    sign
- All macro names are prefixed with: `N_`
- The first letter of global variables is in upper case.

@par            API object naming rules
All API objects are named following this convention: `<group><action><suffix>`

- Group:
    - `sched` - Scheduler services
    - `thd` - Thread management
    - `task` - Task management
    - `tmr` - Virtual Timer management
- Suffix:
    - `none` - normal API object
    - `_i` - I class - Regular Interrupts are locked

All Port Interface objects are named using the rules stated above with certain
differences:
- All functions, structures and unions are prefixed with: `nport`
- All macro names are prefixed with: `NPORT_`
- Port specific objects are prefixed with `NCPU_` or `ncpu`.

@subsection     spec_rr Round-Robin scheduling
Round-Robin scheduling is very **simple algorithm** to implement. This
scheduling is only used when there are two or more threads of the same priority
ready for execution.

@subsection     spec_deterministic Deterministic
Majority of algorithms used in Neon are belonging to **Constant Time
Complexity** category. Constant Time `O(1)` functions needs fixed amount of
time to execute an algorithm. In other words the execution time of Constant
Time Complexity functions does not depend on number of inputs. For more
information see @ref time_complexity.

@subsection     spec_cfg Configurable
The Neon provides configuration files (TODO: specify which) which can
be used to tailor the kernel to application needs.

In addition, the kernel implements a number of hooks which can alter or augment
the behavior of the kernel or applications, by intercepting function calls
between software components.

@subsection     spec_portable Portable
During the design stage of the kernel a special attention was given to achieve
high portability of the kernel. Some data structures and algorithms are
tailored to exploit new hardware features.

@subsection     spec_static Static object allocation
All objects used in Neon can be statically allocated. There is no need to use
any memory management functionality which makes it very easy to verify the
application.

@subsection     spec_unlimited Unlimited number of threads
Neon allows applications to have any number of threads. The only limiting
factors for the maximum number of threads are the amount of RAM and ROM memory
capacity and required processing time.

@subsection     spec_prio Up to 256 thread priority levels
Each thread has a defined priority. Lowest priority level is 0, while the
highest available level is configurable. If Round-Robin scheduling is used then
multiple threads can be in the same priority level. If Round-Robin scheduling
is disabled then each thread must have unique priority level. The priority
sorting algorithm has constant time complexity which means it always executes
in the same time period regardles of the levels of priority used.

@subsection     spec_errchk Error checking
All Neon software is using design methods very similar to approaches of
**contract programming** paradigm for software design. The contract
programming prescribes that Application Programming Interface should have formal,
precise and verifiable specifications, which extend the ordinary definition of
abstract data types with preconditions and postconditions. These specifications
are referred to as "contracts". The contract for each method will normally
contain the following pieces of information:

- Acceptable and unacceptable input values
- Return values and their meanings
- Error and exception condition values that can occur during the execution
- Side effects
- Preconditions
- Postconditions
- Invariants

The contract validations are done by **assert** macros. They have the
responsibility of informing the programmer when a contract can not be
validated.

@subsection     spec_prof Profiling
@note           This feature is not implemented
*/
